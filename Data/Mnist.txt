The MNIST database of handwritten digits, available from this page, has a training set of 60,000 examples, and a test set of 10,000 examples. It is a subset of a larger set available from NIST. The digits have been size-normalized and centered in a fixed-size image.
It is a good database for people who want to try learning techniques and pattern recognition methods on real-world data while spending minimal efforts on preprocessing and formatting.

Four files are available on this site:

train-images-idx3-ubyte.gz:  training set images (9912422 bytes) 
train-labels-idx1-ubyte.gz:  training set labels (28881 bytes) 
t10k-images-idx3-ubyte.gz:   test set images (1648877 bytes) 
t10k-labels-idx1-ubyte.gz:   test set labels (4542 bytes)

please note that your browser may uncompress these files without telling you. If the files you downloaded have a larger size than the above, they have been uncompressed by your browser. Simply rename them to remove the .gz extension. Some people have asked me "my application can't open your image files". These files are not in any standard image format. You have to write your own (very simple) program to read them. The file format is described at the bottom of this page.

The original black and white (bilevel) images from NIST were size normalized to fit in a 20x20 pixel box while preserving their aspect ratio. The resulting images contain grey levels as a result of the anti-aliasing technique used by the normalization algorithm. the images were centered in a 28x28 image by computing the center of mass of the pixels, and translating the image so as to position this point at the center of the 28x28 field.

With some classification methods (particuarly template-based methods, such as SVM and K-nearest neighbors), the error rate improves when the digits are centered by bounding box rather than center of mass. If you do this kind of pre-processing, you should report it in your publications.

The MNIST database was constructed from NIST's Special Database 3 and Special Database 1 which contain binary images of handwritten digits. NIST originally designated SD-3 as their training set and SD-1 as their test set. However, SD-3 is much cleaner and easier to recognize than SD-1. The reason for this can be found on the fact that SD-3 was collected among Census Bureau employees, while SD-1 was collected among high-school students. Drawing sensible conclusions from learning experiments requires that the result be independent of the choice of training set and test among the complete set of samples. Therefore it was necessary to build a new database by mixing NIST's datasets.

The MNIST training set is composed of 30,000 patterns from SD-3 and 30,000 patterns from SD-1. Our test set was composed of 5,000 patterns from SD-3 and 5,000 patterns from SD-1. The 60,000 pattern training set contained examples from approximately 250 writers. We made sure that the sets of writers of the training set and test set were disjoint.

SD-1 contains 58,527 digit images written by 500 different writers. In contrast to SD-3, where blocks of data from each writer appeared in sequence, the data in SD-1 is scrambled. Writer identities for SD-1 is available and we used this information to unscramble the writers. We then split SD-1 in two: characters written by the first 250 writers went into our new training set. The remaining 250 writers were placed in our test set. Thus we had two sets with nearly 30,000 examples each. The new training set was completed with enough examples from SD-3, starting at pattern # 0, to make a full set of 60,000 training patterns. Similarly, the new test set was completed with SD-3 examples starting at pattern # 35,000 to make a full set with 60,000 test patterns. Only a subset of 10,000 test images (5,000 from SD-1 and 5,000 from SD-3) is available on this site. The full 60,000 sample training set is available.

Many methods have been tested with this training set and test set. Here are a few examples. Details about the methods are given in an upcoming paper. Some of those experiments used a version of the database where the input images where deskewed (by computing the principal axis of the shape that is closest to the vertical, and shifting the lines so as to make it vertical). In some other experiments, the training set was augmented with artificially distorted versions of the original training samples. The distortions are random combinations of shifts, scaling, skewing, and compression. 





FILE FORMATS FOR THE MNIST DATABASE

The data is stored in a very simple file format designed for storing vectors and multidimensional matrices. General info on this format is given at the end of this page, but you don't need to read that to use the data files.
All the integers in the files are stored in the MSB first (high endian) format used by most non-Intel processors. Users of Intel processors and other low-endian machines must flip the bytes of the header.

There are 4 files:

train-images-idx3-ubyte: training set images 
train-labels-idx1-ubyte: training set labels 
t10k-images-idx3-ubyte:  test set images 
t10k-labels-idx1-ubyte:  test set labels

The training set contains 60000 examples, and the test set 10000 examples.

The first 5000 examples of the test set are taken from the original NIST training set. The last 5000 are taken from the original NIST test set. The first 5000 are cleaner and easier than the last 5000.

TRAINING SET LABEL FILE (train-labels-idx1-ubyte):

[offset] [type]          [value]          [description] 
0000     32 bit integer  0x00000801(2049) magic number (MSB first) 
0004     32 bit integer  60000            number of items 
0008     unsigned byte   ??               label 
0009     unsigned byte   ??               label 
........ 
xxxx     unsigned byte   ??               label
The labels values are 0 to 9.

TRAINING SET IMAGE FILE (train-images-idx3-ubyte):

[offset] [type]          [value]          [description] 
0000     32 bit integer  0x00000803(2051) magic number 
0004     32 bit integer  60000            number of images 
0008     32 bit integer  28               number of rows 
0012     32 bit integer  28               number of columns 
0016     unsigned byte   ??               pixel 
0017     unsigned byte   ??               pixel 
........ 
xxxx     unsigned byte   ??               pixel
Pixels are organized row-wise. Pixel values are 0 to 255. 0 means background (white), 255 means foreground (black).

TEST SET LABEL FILE (t10k-labels-idx1-ubyte):

[offset] [type]          [value]          [description] 
0000     32 bit integer  0x00000801(2049) magic number (MSB first) 
0004     32 bit integer  10000            number of items 
0008     unsigned byte   ??               label 
0009     unsigned byte   ??               label 
........ 
xxxx     unsigned byte   ??               label
The labels values are 0 to 9.

TEST SET IMAGE FILE (t10k-images-idx3-ubyte):

[offset] [type]          [value]          [description] 
0000     32 bit integer  0x00000803(2051) magic number 
0004     32 bit integer  10000            number of images 
0008     32 bit integer  28               number of rows 
0012     32 bit integer  28               number of columns 
0016     unsigned byte   ??               pixel 
0017     unsigned byte   ??               pixel 
........ 
xxxx     unsigned byte   ??               pixel
Pixels are organized row-wise. Pixel values are 0 to 255. 0 means background (white), 255 means foreground (black). 
  
THE IDX FILE FORMAT

the IDX file format is a simple format for vectors and multidimensional matrices of various numerical types.
The basic format is

magic number 
size in dimension 0 
size in dimension 1 
size in dimension 2 
..... 
size in dimension N 
data

The magic number is an integer (MSB first). The first 2 bytes are always 0.

The third byte codes the type of the data: 
0x08: unsigned byte 
0x09: signed byte 
0x0B: short (2 bytes) 
0x0C: int (4 bytes) 
0x0D: float (4 bytes) 
0x0E: double (8 bytes)

The 4-th byte codes the number of dimensions of the vector/matrix: 1 for vectors, 2 for matrices....

The sizes in each dimension are 4-byte integers (MSB first, high endian, like in most non-Intel processors).

The data is stored like in a C array, i.e. the index in the last dimension changes the fastest. 
  
  
Happy hacking.

The digit images in the MNIST set were originally selected and experimented with by Chris Burges and Corinna Cortes using bounding-box normalization and centering. Yann LeCun's version which is provided on this page uses centering by center of mass within in a larger window.




このページから入手できる手書き数字のMNISTデータベースは、60,000例の訓練セットと10,000例のテストセットを持っています。これは、NISTから入手できるより大きなセットのサブセットです。数字は、サイズが正規化され、固定サイズの画像に中央揃えされています。
これは、前処理と書式設定に最小限の労力を費やしながら、実世界のデータでテクニックやパターン認識の方法を学びたい人にとって、優れたデータベースです。

このサイトには4つのファイルがあります：

train-images-idx3-ubyte.gz：トレーニングセット画像（9912422バイト）
train-labels-idx1-ubyte.gz：トレーニングセットラベル（28881バイト）
t10k-images-idx3-ubyte.gz：テストセットイメージ（1648877バイト）
t10k-labels-idx1-ubyte.gz：テストセットラベル（4542バイト）

あなたのブラウザは、あなたにあなたのことを伝えずにこれらのファイルを解凍するかもしれないことに注意してください。ダウンロードしたファイルのサイズが上記より大きい場合は、ブラウザによって圧縮されていません。 .gz拡張子を削除するように名前を変更するだけです。 「私のアプリケーションはあなたのイメージファイルを開くことができません」と聞いた人もいます。これらのファイルは標準イメージ形式ではありません。あなたはそれらを読むためのあなた自身の（非常に単純な）プログラムを書く必要があります。ファイル形式はこのページの下部に記載されています。

NISTのオリジナルの白黒（二値）画像は、アスペクト比を維持したまま20x20ピクセルボックスに収まるようにサイズを正規化しました。得られた画像は、正規化アルゴリズムによって使用されるアンチエイリアス技術の結果として、グレーレベルを含む。画像は28x28画像の中央に配置され、画素の重心を計算し、この点を28x28フィールドの中心に位置させるように画像を平行移動させることによって、中心に置かれた。

いくつかの分類方法（特に、SVMおよびK最近傍のようなテンプレートベースの方法）では、桁が重心ではなく境界ボックスによって中央揃えされると、エラー率が向上します。このような前処理を行う場合は、出版物に報告する必要があります。

MNISTデータベースは、NISTのSpecial Database 3とSpecial Database 1から構成され、手書き数字のバイナリイメージを含んでいます。 NISTは当初、トレーニングセットとしてSD-3を、テストセットとしてSD-1を指定しました。しかし、SD-3はSD-1よりはるかにクリーンで認識しやすいです。その理由は、国勢調査局の従業員の間でSD-3が収集され、高校生の間でSD-1が収集されたためである。学習実験から賢明な結論を導き出すには、その結果がトレーニングセットの選択と完全なサンプルセットの中からテストとは独立していることが必要です。したがって、NISTのデータセットを混合して新しいデータベースを構築する必要がありました。

MNISTトレーニングセットは、SD-3からの30,000パターンとSD-1からの30,000パターンから構成されています。私たちのテストセットは、SD-3からの5,000パターンとSD-1からの5,000パターンから構成されていました。 60,000パターントレーニングセットには、約250人の作家の例が含まれていました。訓練セットとテストセットの作者のセットがばらばらになっていることを確認しました。

SD-1には500人のライターが書いた58,527桁の画像が含まれています。各ライタからのデータブロックが順番に現れるSD-3とは対照的に、SD-1のデータはスクランブルされている。 SD-1の作者IDが利用可能であり、我々はこの情報を使用して作家の解読を行った。その後、SD-1を2つに分割しました。最初の250人の作家によって書かれた文字が新しいトレーニングセットに入りました。残りの250人の作家をテストセットに入れました。したがって、それぞれ約30,000例の2つのセットがありました。新しいトレーニングセットは、パターン＃0から始まるSD-3の例を十分に取り入れて、60,000のトレーニングパターンをフルセットで作成しました。同様に、新しいテストセットは、パターン＃35,000から始まるSD-3のサンプルを使用して完成し、6万のテストパターンでフルセットを作成しました。このサイトでは、10,000のテスト画像（SD-1から5,000、SD-3から5,000）のサブセットのみが利用可能です。完全な60,000サンプルのトレーニングセットが利用可能です。

多くの方法がこのトレーニングセットとテストセットでテストされています。いくつかの例があります。メソッドの詳細は、次の論文に記載されています。これらの実験の一部では、データベースのバージョンを使用して、入力イメージが傾き補正された場所（垂直に最も近い形状の主軸を計算し、垂直になるように線をシフトすることによって）を行った。他のいくつかの実験では、訓練セットは、元の訓練サンプルの人為的に歪んだバージョンで補強された。歪みは、シフト、スケーリング、スキュー、圧縮のランダムな組み合わせです。 